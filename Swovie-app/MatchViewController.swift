import UIKit
import Firebase
import FirebaseMessaging
import FirebaseAuth

class MatchViewController: UIViewController {
    
    private var users: [User] = []
    private let knownUsersDB: [User] = [
        User(id: "123", name: "–ê–ª–∏—Å–∞", avatarName: .systemPink),
        User(id: "1234", name: "–ë–æ–±", avatarName: .systemBlue),
        User(id: "12345", name: "–ß–∞—Ä–ª–∏", avatarName: .systemGreen)
    ]
    
    private let stackView = UIStackView()
    private let matchButton = UIButton(type: .system)
    private let addIdButton = UIButton(type: .system)
    private var idTextFields: [UITextField] = []
    private var invitedUserIds: Set<String> = []
    
    
    private let db = Firestore.firestore()
    private var currentUserId: String? {
        return Auth.auth().currentUser?.uid
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .systemBackground
        title = "–î–æ–±–∞–≤—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        setupStackView()
        setupAddIdButton()
        setupMatchButton()
    }
    
    private func setupStackView() {
        stackView.axis = .vertical
        stackView.spacing = 12
        stackView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(stackView)
        
        NSLayoutConstraint.activate([
            stackView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 16),
            stackView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            stackView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16)
        ])
    }
    
    private func setupAddIdButton() {
        addIdButton.setTitle("‚ûï –î–æ–±–∞–≤–∏—Ç—å ID", for: .normal)
        addIdButton.translatesAutoresizingMaskIntoConstraints = false
        addIdButton.addTarget(self, action: #selector(addIdField), for: .touchUpInside)
        view.addSubview(addIdButton)
        
        NSLayoutConstraint.activate([
            addIdButton.topAnchor.constraint(equalTo: stackView.bottomAnchor, constant: 20),
            addIdButton.centerXAnchor.constraint(equalTo: view.centerXAnchor)
        ])
    }
    
    private func setupMatchButton() {
        matchButton.setTitle("üöÄ –ù–∞—á–∞—Ç—å –º—ç—Ç—á–∏–Ω–≥", for: .normal)
        matchButton.titleLabel?.font = UIFont.boldSystemFont(ofSize: 18)
        matchButton.translatesAutoresizingMaskIntoConstraints = false
        matchButton.addTarget(self, action: #selector(startMatching), for: .touchUpInside)
        view.addSubview(matchButton)
        
        NSLayoutConstraint.activate([
            matchButton.topAnchor.constraint(equalTo: addIdButton.bottomAnchor, constant: 20),
            matchButton.centerXAnchor.constraint(equalTo: view.centerXAnchor)
        ])
    }
    
    @objc private func addIdField() {
        let textField = UITextField()
        textField.placeholder = "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        textField.borderStyle = .roundedRect
        textField.delegate = self
        idTextFields.append(textField)
        stackView.addArrangedSubview(textField)
    }
    
    @objc private func startMatching() {
        users.removeAll()
        invitedUserIds.removeAll()
        
        for textField in idTextFields {
            guard let id = textField.text, !id.isEmpty else { continue }
            invitedUserIds.insert(id)
        }
        
        if invitedUserIds.isEmpty {
            showAlert(title: "–û—à–∏–±–∫–∞", message: "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∞–∫–∏–º–∏ ID")
        } else {
            verifyUsersExist { [weak self] allExist in
                if allExist {
                    self?.createGroupAndSendInvitations()
                } else {
                    self?.showAlert(title: "–û—à–∏–±–∫–∞", message: "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                }
            }
        }
    }
    
    private func createGroupAndSendInvitations() {
        guard let currentUserId = currentUserId else {
            showAlert(title: "–û—à–∏–±–∫–∞", message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return
        }
        
        let groupId = UUID().uuidString
        let groupName = "–ì—Ä—É–ø–ø–∞ \(Date().formatted())"
            
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ–≥–æ ID –±—ã–ª –≤–≤–µ–¥–µ–Ω
        var allInvitedUsers = Array(invitedUserIds)
        if invitedUserIds.contains(currentUserId) {
            allInvitedUsers.append(currentUserId)
        }
        
        let groupData: [String: Any] = [
            "id": groupId,
            "name": groupName,
            "adminId": currentUserId,
            "memberIds": [currentUserId], // –ê–¥–º–∏–Ω —Å—Ä–∞–∑—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
            "pendingInvitations": allInvitedUsers, // –í—Å–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–∞
            "createdAt": Timestamp(date: Date())
        ]
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –≤ Firestore
        db.collection("groups").document(groupId).setData(groupData) { [weak self] error in
            guard let self = self else { return }
            
            if let error = error {
                self.showAlert(title: "–û—à–∏–±–∫–∞", message: error.localizedDescription)
                return
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            self.sendInvitationsToUsers(groupId: groupId, groupName: groupName)
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–≤–∞–π–ø—É
            self.showSwipeViewController(groupId: groupId)
        }
    }
    
    private func sendInvitationsToUsers(groupId: String, groupName: String) {
        guard let currentUserId = currentUserId else { return }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω–∞ –≥—Ä—É–ø–ø—ã)
        db.collection("users").document(currentUserId).getDocument { [weak self] snapshot, error in
            guard let self = self,
                  let adminData = snapshot?.data(),
                  let adminName = adminData["name"] as? String else { return }
            
            // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for userId in self.invitedUserIds {
                // 1. –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.db.collection("notifications")
                    .document(userId)
                    .collection("pending")
                    .addDocument(data: [
                        "type": "group_invitation",
                        "groupId": groupId,
                        "groupName": groupName,
                        "inviterId": currentUserId,
                        "inviterName": adminName,
                        "timestamp": Timestamp(date: Date()),
                        "isRead": false
                    ])
                
                // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                self.sendPushNotification(to: userId, groupId: groupId, groupName: groupName, inviterName: adminName)
            }
        }
    }
    
    private func sendPushNotification(to userId: String, groupId: String, groupName: String, inviterName: String) {
        // –ü–æ–ª—É—á–∞–µ–º FCM —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.collection("users").document(userId).getDocument { [weak self] snapshot, error in
            guard let self = self,
                  let userData = snapshot?.data(),
                  let fcmToken = userData["fcmToken"] as? String else { return }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            let message: [String: Any] = [
                "to": fcmToken,
                "notification": [
                    "title": "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É",
                    "body": "\(inviterName) –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –≤ –≥—Ä—É–ø–ø—É \(groupName)",
                    "sound": "default"
                ],
                "data": [
                    "type": "group_invitation",
                    "groupId": groupId,
                    "inviterId": self.currentUserId ?? ""
                ]
            ]
            
            // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ FCM
            // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ Cloud Functions –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –∫ FCM API
            self.sendFCMNotification(message: message)
        }
    }
    
    private func sendFCMNotification(message: [String: Any]) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ URLSession
        // –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –∏–∑ Firebase Console
        let url = URL(string: "https://fcm.googleapis.com/fcm/send")!
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("key=AIzaSyBcYQxGyuU5sJkyBb8JCoCAP0H81QBqWFE", forHTTPHeaderField: "Authorization")
        
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: message, options: [])
            
            let task = URLSession.shared.dataTask(with: request) { data, response, error in
                if let error = error {
                    print("Error sending notification: \(error.localizedDescription)")
                    return
                }
                
                if let data = data {
                    print("Notification sent: \(String(data: data, encoding: .utf8) ?? "")")
                }
            }
            task.resume()
        } catch {
            print("Error creating notification JSON: \(error.localizedDescription)")
        }
    }
    
    private func showSwipeViewController(groupId: String) {
        let swipeVC = SwipeViewController()
        swipeVC.groupId = groupId
        navigationController?.pushViewController(swipeVC, animated: true)
    }
    
    private func showAlert(title: String, message: String) {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .default))
        present(alert, animated: true)
    }
    
    private func verifyUsersExist(completion: @escaping (Bool) -> Void) {
        let db = Firestore.firestore()
        let dispatchGroup = DispatchGroup()
        var allExist = true
        
        for userId in invitedUserIds {
            dispatchGroup.enter()
            db.collection("users").document(userId).getDocument { snapshot, error in
                defer { dispatchGroup.leave() }
                
                if error != nil || snapshot?.exists != true {
                    allExist = false
                }
            }
        }
        
        dispatchGroup.notify(queue: .main) {
            completion(allExist)
        }
    }
}

extension MatchViewController: UITextFieldDelegate {
    func textFieldDidEndEditing(_ textField: UITextField) {
        guard let id = textField.text, !id.isEmpty else { return }
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑–µ
        // db.collection("users").document(id).getDocument { ... }
    }
}
